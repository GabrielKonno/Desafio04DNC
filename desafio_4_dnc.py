# -*- coding: utf-8 -*-
"""Desafio 4 DNC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JcfiivEz5hQPf407Bn1M3sEy19nIG2fA
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('MKT.csv')

print(df.head(10))
print("-"*30)
print(df.info())
print("-"*30)
print(df.describe())
print("-"*30)
print(df.isnull().sum())

# Histograma Distribuição dos Investimentos
df[['youtube','facebook','newspaper']].hist(bins=30, figsize=(10, 7),edgecolor='black')
plt.tight_layout()

for ax in axes.flatten():
    ax.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)

plt.show()

# Histograma das vendas
plt.figure(figsize=(6,4))
sns.histplot(df['sales'], kde=True)
plt.title('Distribuição das Vendas')
plt.show()


# Matriz de correlação
corr = df.corr()

# Heatmap da correlação
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Matriz de Correlação')
plt.show()

# Scatter plots
sns.pairplot(df)
plt.show()

"""Aqui vemos que o histograma da distribuição das vendas não diz muita coisa.

O histograma da distribuição dos investimentos permite entender um pouco quanto foi investido em cada plataforma, mas também não diz muito.

Com o Heatmap e o Scatter podemos ver a relação de investimento e retorno com o youtube é mais evidente, enquanto facebook vemos menos retorno e com jornais, pouca relação.
"""

# Função para remover outliers usando IQR
def remove_outliers(df, coluna):
    Q1 = df[coluna].quantile(0.25)
    Q3 = df[coluna].quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    return df[(df[coluna] >= limite_inferior) & (df[coluna] <= limite_superior)]

# Aplicar a função em todas as colunas numéricas
for coluna in ['youtube', 'facebook', 'newspaper', 'sales']:
    df = remove_outliers(df, coluna)


# Informações sobre DF atualizado

print(df.info())
print("-"*30)
print(df.describe())
print("-"*30)
print(df.isnull().sum())

x = df[['youtube','facebook','newspaper']]
y = df['sales']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(f"Tamanho do conjunto de treino: {x_train.shape}")
print(f"Tamanho do conjunto de teste: {x_test.shape}")

# Instanciar o modelo
modelo = LinearRegression()

# Treinar o modelo
modelo.fit(x_train, y_train)

# Previsões no conjunto de teste
y_pred = modelo.predict(x_test)

# Erro Quadrático Médio (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Erro Quadrático Médio (MSE): {mse}")

# Coeficiente de Determinação (R²)
r2 = r2_score(y_test, y_pred)
print(f"Coeficiente de Determinação (R²): {r2}")

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.7, color='b')
plt.xlabel('Vendas Reais')
plt.ylabel('Vendas Previstas')
plt.title('Vendas Reais vs. Vendas Previstas')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Linha de referência
plt.show()

# Coeficientes das features
coeficientes = pd.DataFrame({
    'Feature': x.columns,
    'Coeficiente': modelo.coef_
})

print(coeficientes)
print("")
print("Coeficientes Positivos: Indicam que, conforme o investimento na respectiva plataforma aumenta, as vendas tendem a aumentar.")
print("Coeficientes Negativos: Indicam que, conforme o investimento na respectiva plataforma aumenta, as vendas tendem a diminuir.")

